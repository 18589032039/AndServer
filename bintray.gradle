apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

group = PROJECT_GROUP
version = PROJECT_VERSION

def toRemote = project.hasProperty('toRemote') ? Boolean.valueOf("${toRemote}") : false
println("publish to remote repositoryï¼š${toRemote}")

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: mavenLocal().getUrl())
            }
        }
    }
}

bintray {
    user = BINTRAY_USERNAME
    key = BINTRAY_API_KEY

    configurations = ['archives']
    pkg {
        repo = 'maven'
        name = POM_NAME
        desc = POM_DESCRIPTION
        websiteUrl = POM_URL
        vcsUrl = POM_GIT_URL
        licenses = [POM_LICENCE_NAME]
        publish = true
        publicDownloadNumbers = true
        version {
            desc = "${POM_NAME} ${PROJECT_VERSION}."
            gpg {
                sign = true
                passphrase = BINTRAY_GPG_PASSWORD
            }
            mavenCentralSync {
                sync = true
                user = SONATYPE_USERNAME
                password = SONATYPE_PASSWORD
                close = '1'
            }
        }
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging POM_PACKAGING
                name POM_NAME
                url POM_URL
                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                    }
                }
                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_ID
                        email POM_DEVELOPER_EMAIL
                    }
                }
                scm {
                    url POM_URL
                    connection POM_GIT_URL
                    developerConnection POM_GIT_URL
                }
            }
        }
    }
}

if (project.getPlugins().hasPlugin("com.android.library")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.source
    }
    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.source
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        failOnError false
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
} else {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

artifacts {
    archives sourcesJar
    archives javadocJar
}