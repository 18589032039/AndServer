apply plugin: 'maven'
apply plugin: 'signing'

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

def toRemote = project.hasProperty('toRemote') ? Boolean.valueOf("${toRemote}") : false
println("toRemoteï¼š${toRemote}")

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                pom.version = version
                repository(url: mavenLocal().getUrl())
            }
        }

        signing {
            required { toRemote && gradle.taskGraph.hasTask("uploadArchives") }
            sign configurations.archives
        }

        if (project.getPlugins().hasPlugin("com.android.application")
            || project.getPlugins().hasPlugin("com.android.library")) {

            task javadoc(type: Javadoc) {
                source = android.sourceSets.main.java.source
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                failOnError false
            }

            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }

            task sourcesJar(type: Jar) {
                classifier = 'sources'
                from android.sourceSets.main.java.source
            }
        } else {
            task javadocJar(type: Jar, dependsOn: javadoc) {
                classifier = 'javadoc'
                from javadoc.destinationDir
            }
            task sourcesJar(type: Jar, dependsOn: classes) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }
        }

        artifacts {
            archives javadocJar
            archives sourcesJar
        }
    }
}